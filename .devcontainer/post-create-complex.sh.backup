#!/bin/bash

# Career Center DevContainer Post-Create Script (Complex Version)
# This script runs after the devcontainer is created

set -e

echo "🚀 Setting up Career Center development environment..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in the correct directory
if [ ! -f "composer.json" ]; then
    print_error "This doesn't appear to be a Laravel project directory."
    exit 1
fi

# Set up proper permissions
print_status "Setting up file permissions..."
sudo chown -R www-data:www-data /var/www/html
sudo chmod -R 755 /var/www/html
sudo chmod -R 775 /var/www/html/storage
sudo chmod -R 775 /var/www/html/bootstrap/cache
print_success "File permissions configured"

# Copy environment file if it doesn't exist
if [ ! -f ".env" ]; then
    print_status "Copying environment file..."
    cp .env.development .env
    print_success "Environment file copied from .env.development"
fi

# Install PHP dependencies
print_status "Installing PHP dependencies with Composer..."
if composer install --prefer-dist --no-progress --no-suggest; then
    print_success "PHP dependencies installed successfully"
else
    print_warning "Some PHP dependencies may have failed to install"
fi

# Install Node.js dependencies
print_status "Installing Node.js dependencies..."
if npm ci --silent; then
    print_success "Node.js dependencies installed successfully"
else
    print_warning "Some Node.js dependencies may have failed to install"
fi

# Generate application key if needed
if grep -q "APP_KEY=base64:your-32-character-secret-key" .env; then
    print_status "Generating Laravel application key..."
    php artisan key:generate --force
    print_success "Application key generated"
fi

# Wait for database to be ready
print_status "Waiting for database connection..."
max_attempts=30
attempt=1

while [ $attempt -le $max_attempts ]; do
    if php artisan migrate:status >/dev/null 2>&1; then
        print_success "Database connection established"
        break
    fi
    
    if [ $attempt -eq $max_attempts ]; then
        print_warning "Database connection timeout. You may need to run migrations manually."
        break
    fi
    
    echo "Attempt $attempt/$max_attempts - waiting for database..."
    sleep 2
    ((attempt++))
done

# Run database migrations
if php artisan migrate:status >/dev/null 2>&1; then
    print_status "Running database migrations..."
    if php artisan migrate --force; then
        print_success "Database migrations completed"
    else
        print_warning "Database migrations failed. You may need to run them manually."
    fi
fi

# Create storage link
print_status "Creating storage symbolic link..."
if php artisan storage:link; then
    print_success "Storage link created"
else
    print_warning "Storage link creation failed"
fi

# Clear and cache Laravel configurations
print_status "Optimizing Laravel configurations..."
php artisan config:clear
php artisan cache:clear
php artisan view:clear
php artisan route:clear
print_success "Laravel configurations optimized"

# Build frontend assets
print_status "Building frontend assets..."
if npm run build; then
    print_success "Frontend assets built successfully"
else
    print_warning "Frontend assets build failed. You may need to build them manually."
fi

# Set up Git hooks (if .git directory exists)
if [ -d ".git" ]; then
    print_status "Setting up Git hooks..."
    
    # Create pre-commit hook
    if [ ! -f ".git/hooks/pre-commit" ]; then
        cat > .git/hooks/pre-commit << 'EOF'
#!/bin/bash
# Laravel pre-commit hook

echo "Running Laravel Pint (code formatting)..."
if command -v ./vendor/bin/pint >/dev/null 2>&1; then
    ./vendor/bin/pint --dirty
fi

echo "Running PHPStan (static analysis)..."
if command -v ./vendor/bin/phpstan >/dev/null 2>&1; then
    ./vendor/bin/phpstan analyse --memory-limit=1G
fi

echo "Running tests..."
if command -v ./vendor/bin/pest >/dev/null 2>&1; then
    ./vendor/bin/pest --stop-on-failure
elif command -v ./vendor/bin/phpunit >/dev/null 2>&1; then
    ./vendor/bin/phpunit --stop-on-failure
fi
EOF
        chmod +x .git/hooks/pre-commit
        print_success "Git pre-commit hook installed"
    fi
fi

# Create useful aliases
print_status "Setting up shell aliases..."
cat >> ~/.bashrc << 'EOF'

# Laravel Career Center Aliases
alias art='php artisan'
alias tinker='php artisan tinker'
alias migrate='php artisan migrate'
alias seed='php artisan db:seed'
alias fresh='php artisan migrate:fresh --seed'
alias serve='php artisan serve --host=0.0.0.0'
alias test='php artisan test'
alias pest='./vendor/bin/pest'
alias pint='./vendor/bin/pint'
alias stan='./vendor/bin/phpstan analyse'

# Docker aliases
alias dc='docker-compose'
alias dcd='docker-compose -f docker-compose.dev.yml'
alias dcl='docker-compose logs -f'
alias dcp='docker-compose ps'

# Git aliases
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git pull'
alias gb='git branch'
alias gco='git checkout'

# NPM aliases
alias nrd='npm run dev'
alias nrb='npm run build'
alias nrw='npm run watch'

EOF

# Also add to zsh if it exists
if [ -f ~/.zshrc ]; then
    cat >> ~/.zshrc << 'EOF'

# Laravel Career Center Aliases
alias art='php artisan'
alias tinker='php artisan tinker'
alias migrate='php artisan migrate'
alias seed='php artisan db:seed'
alias fresh='php artisan migrate:fresh --seed'
alias serve='php artisan serve --host=0.0.0.0'
alias test='php artisan test'
alias pest='./vendor/bin/pest'
alias pint='./vendor/bin/pint'
alias stan='./vendor/bin/phpstan analyse'

# Docker aliases
alias dc='docker-compose'
alias dcd='docker-compose -f docker-compose.dev.yml'
alias dcl='docker-compose logs -f'
alias dcp='docker-compose ps'

# Git aliases
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git pull'
alias gb='git branch'
alias gco='git checkout'

# NPM aliases
alias nrd='npm run dev'
alias nrb='npm run build'
alias nrw='npm run watch'

EOF
fi

print_success "Shell aliases configured"

# Create workspace settings for VS Code
print_status "Creating VS Code workspace settings..."
mkdir -p .vscode

# Create launch.json for Xdebug
cat > .vscode/launch.json << 'EOF'
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Listen for Xdebug",
            "type": "php",
            "request": "launch",
            "port": 9003,
            "pathMappings": {
                "/var/www/html": "${workspaceFolder}"
            },
            "hostname": "0.0.0.0"
        },
        {
            "name": "Launch currently open script",
            "type": "php",
            "request": "launch",
            "program": "${file}",
            "cwd": "${fileDirname}",
            "port": 0,
            "runtimeArgs": [
                "-dxdebug.start_with_request=yes"
            ]
        }
    ]
}
EOF

# Create tasks.json for common Laravel tasks
cat > .vscode/tasks.json << 'EOF'
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Laravel: Serve",
            "type": "shell",
            "command": "php artisan serve --host=0.0.0.0",
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new"
            },
            "isBackground": true,
            "problemMatcher": []
        },
        {
            "label": "Laravel: Migration",
            "type": "shell",
            "command": "php artisan migrate",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            }
        },
        {
            "label": "Laravel: Fresh Migration with Seed",
            "type": "shell",
            "command": "php artisan migrate:fresh --seed",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            }
        },
        {
            "label": "Laravel: Clear Cache",
            "type": "shell",
            "command": "php artisan cache:clear && php artisan config:clear && php artisan view:clear",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            }
        },
        {
            "label": "Laravel: Run Tests",
            "type": "shell",
            "command": "php artisan test",
            "group": {
                "kind": "test",
                "isDefault": true
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            }
        },
        {
            "label": "NPM: Install",
            "type": "shell",
            "command": "npm install",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            }
        },
        {
            "label": "NPM: Development Build",
            "type": "shell",
            "command": "npm run dev",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            }
        },
        {
            "label": "NPM: Production Build",
            "type": "shell",
            "command": "npm run build",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            }
        },
        {
            "label": "NPM: Watch",
            "type": "shell",
            "command": "npm run watch",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new"
            },
            "isBackground": true,
            "problemMatcher": []
        },
        {
            "label": "Laravel Pint: Format Code",
            "type": "shell",
            "command": "./vendor/bin/pint",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            }
        },
        {
            "label": "PHPStan: Analyze",
            "type": "shell",
            "command": "./vendor/bin/phpstan analyse --memory-limit=1G",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            }
        }
    ]
}
EOF

print_success "VS Code workspace configuration created"

# Display final status
echo ""
echo "🎉 DevContainer setup completed successfully!"
echo ""
echo "📋 What's available:"
echo -e "   ${GREEN}🌐 Laravel Application:${NC} http://localhost"
echo -e "   ${GREEN}🗄️  Database:${NC} MySQL on localhost:3306"
echo -e "   ${GREEN}🔴 Redis:${NC} localhost:6379"
echo -e "   ${GREEN}📧 MailHog:${NC} http://localhost:8025"
echo -e "   ${GREEN}🐛 Xdebug:${NC} Configured on port 9003"
echo ""
echo "🔧 Useful commands:"
echo -e "   ${CYAN}art migrate${NC} - Run database migrations"
echo -e "   ${CYAN}art tinker${NC} - Open Laravel REPL"
echo -e "   ${CYAN}npm run dev${NC} - Build assets for development"
echo -e "   ${CYAN}npm run watch${NC} - Watch for asset changes"
echo -e "   ${CYAN}art test${NC} - Run tests"
echo -e "   ${CYAN}pint${NC} - Format code with Laravel Pint"
echo ""
echo "🎯 Next steps:"
echo "   1. Open Command Palette (Ctrl+Shift+P)"
echo "   2. Run 'Tasks: Run Task' to see available Laravel tasks"
echo "   3. Start debugging with F5 or run 'Debug: Start Debugging'"
echo "   4. Visit http://localhost to see your application"
echo ""
print_success "Happy coding with Laravel Career Center! 🚀"
